<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SYW BLOG SITE</title>
    <link>https://pipiwen.github.io/</link>
    <description>Recent content on SYW BLOG SITE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 05 Jul 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://pipiwen.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Reflect</title>
      <link>https://pipiwen.github.io/2020/07/05/reflect/</link>
      <pubDate>Sun, 05 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pipiwen.github.io/2020/07/05/reflect/</guid>
      <description>反射的应用  SpringMVC中处理web请求,利用反射和注解可以将请求参数转换为java对象,将java对象变为相应内容. Spring利用反射的特性实现了对象管理容器,可以方便管理对象的生命周期和其中复杂的依赖关系. AOP利用反射的特性将日志记录,安全检查和主体业务相分离.  反射机制  一般操作数据是都是知道并且依赖于数据类型的如new关键字,将对象传递给方法特定   编译器也是根据类型进行检查并编译   但是反射不一样,反射是在运行时进行的,动态获取类(接口)信息,变量信息,方法信息,构造器信息,根据这些动态获取到的信息, 来动态创建对象,或修改访问成员,调用方法等.  Class类  每个一加载的类在内存中有有一份类的信息,每个对象都有指向它所述类信息的应用.   java中所有类的根父类Objec都有方法指向Class类  public final native Class&amp;lt;?&amp;gt; getClass() Class是一个泛型类,有一个类型参数,因此getCalss()是不知道具体的类型.   不一定需要拥有对象调用方法,直接使用&amp;lt;类名&amp;gt;.class属性  Class&amp;lt;Date&amp;gt; cls = Date.class; 接口也有&amp;lt;接口&amp;gt;.calss  Class&amp;lt;Comparable&amp;gt; cls = Comparable.class; 基本类型没有getClass()但是有对应的class对象,void作为特殊的返回类型也是有的  Class&amp;lt;Integer&amp;gt; intCls = int.class;Class&amp;lt;Byte&amp;gt; byteCls = byte.class;Class&amp;lt;Character&amp;gt; charCls = char.class;Class&amp;lt;Double&amp;gt; doubleCls = double.class;Class&amp;lt;Void&amp;gt; voidCls = void.class; 对于数组,每种类型的数组都有对应的class对象,每个维度都有一个,即以为数组有一个Class对象,二位数组有2个.</description>
    </item>
    
    <item>
      <title>Tree</title>
      <link>https://pipiwen.github.io/2020/05/22/tree/</link>
      <pubDate>Fri, 22 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pipiwen.github.io/2020/05/22/tree/</guid>
      <description>#排序二叉树 ##浅谈对于树的理解：
 现实中理解树它是从下往上长的,树会分叉。 在计算机程序中是与现实相反的,树是从上往下长的,树也会分叉,有一个根节点,每个节点最多有一个或多个孩子,没有节点的孩子一般称作叶子节点。 二叉树是一个树,但是每个节点最多有2个孩子,一左一右.
 这两棵树都是二叉树，左边的根节点为5，除了叶子节点外，每个节点都有两个孩子节点，右边的根节点为7，有的节点有两个孩子节点，有的只有一个。 树有一个高度或深度的概念，是从根到叶子节点经过的节点个数的最大值，左边树的高度为3，右边的为5。 排序二叉树也是二叉树，但，它没有重复元素，而且是有序的二叉树，什么顺序呢？对每个节点而言：
 如果左子树不为空，则左子树上的所有节点都小于该节点 如果右子树不为空，则右子树上的所有节点都大于该节点  基本算法 查找 排序二叉树有一个很好的优点，在其中查找一个元素是很方便、也很高效的，基本步骤为：
 首先与根节点比较，如果相同，就找到了 如果小于根节点，则到左子树中递归查找 如果大于根节点，则到右子树中递归查找   这个步骤与在数组中进行二分查找或者说折半查找的思路是类似的，如果二叉树是比较平衡的，类似上图中左边的二叉树，则每次比较都能将比较范围缩小一半，效率很高。  遍历 排序二叉树也可以方便的按序遍历，用递归的方式，用如下算法即可按序遍历(中序遍历)：
 访问左子树 访问当前节点 访问右子树  比如，遍历访问下面的二叉树：
从根节点开始，但先访问根节点的左子树，一直到最左边的节点，所以第一个访问的是1，1没有右子树，返回上一层，访问3，然后访问3的右子树，4没有左子树，所以访问4，然后是4的右子树6，依次类推，访问顺序就是有序的：1 3 4 6 7 8 9
插入 在排序二叉树中，插入元素首先要找插入位置，即新节点的父节点，怎么找呢？与查找元素类似，从根节点开始往下找，其步骤为：
 与当前节点比较，如果相同，表示已经存在了，不能再插入。 如果小于当前节点，则到左子树中寻找，如果左子树为空，则当前节点即为要找的父节点。 如果大于当前节点，则到右子树中寻找，如果右子树为空，则当前节点即为要找的父节点。 找到父节点后，即可插入，如果插入元素小于父节点，则作为左孩子插入，否则作为右孩子插入  我们来看个例子，依次插入7, 3, 4, 1, 9, 6, 8的过程，这个过程如下图所示：
删除 从排序二叉树中删除一个节点要复杂一些，有三种情况：
 节点为叶子节点 节点只有一个孩子 节点有两个孩子  如果节点为叶子节点，则很简单，可以直接删掉，修改父节点的对应孩子为空即可。
如果节点只有一个孩子节点，则替换待删节点为孩子节点，或者说，在孩子节点和父节点之间直接建立链接。比如说，在下图中，左边二叉树中删除节点4，就是让4的父节点3与4的孩子节点6直接建立链接。
如果节点有两个孩子，则首先找该节点的后继（根据之前介绍的后继算法，后继为右子树中最小的节点，这个后继一定没有左孩子），找到后继后，替换待删节点为后继的内容，然后再删除后继节点。后继节点没有左孩子，这就将两个孩子的情况转换为了叶子节点或只有一个孩子的情况。
比如说，在下图中，从左边二叉树中删除节点3，3有两个孩子，后继为4，首先替换3的内容为4，然后再删除节点4。
小结 排序二叉树保持了元素的顺序，而且是一种综合效率很高的数据结构，基本的保存、删除、查找的效率都为O(h)，h为树的高度，在树平衡的情况下，h为log2(N)，N为节点数，比如，如果N为1024，则log2(N)为10。
基本的排序二叉树不能保证树的平衡，可能退化为一个链表，有很多保持树平衡的算法，AVL树是第一个，能保证树的高度平衡，但红黑树是实际中使用更为广泛的，虽然只能保证大致平衡，但降低了维持树平衡需要的开销，整体统计效果更好。</description>
    </item>
    
    <item>
      <title>React Learning</title>
      <link>https://pipiwen.github.io/2020/05/21/react-learning/</link>
      <pubDate>Thu, 21 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pipiwen.github.io/2020/05/21/react-learning/</guid>
      <description>#移动APP ##混合移动开发概念：
 通俗理解就是把开发web网站的技术（HTML+CSS+JS）通过某种方式，移植到移动app上进行开发。 前端混合移动app开发方式抛弃了官方的开发平台和方式（苹果，安卓），使用前端独有的方式进行app开发体验。
 ##移动app开发的几个概念
 原始开发(NativeApp): 指的是使用 IOS,Android官方提供的工具和开发平台和配套的语言进行手机app开发 前端开发: 使用一些前端已有技术（HTML+CSS+JS）搭配一些相关的打包编译技术，完成以个app的开发。 什么是APP: application的缩写意思为可安装的应用程序。 app的分类：  按平台划分：  pc 移动端   按功能划分：  应用 游戏     app和web的区别：  app的概念：application的缩写意思为可安装的应用程序。  优点： 流畅，可以脱网。 缺点： 不能夸平台。   web概念： 基于浏览器的web网站。  优点： 可以跨平台。 缺点； 没有app流畅，不稳定（受限于网速）      为什么要学习混合app开发 程序员角度：  工作需求 能接触到前端流行框架 react中全部使用ES6语法（class）   前端先相对来说是一个永恒的行业(只要市面上还有浏览器的存在 )  从企业的角度分析:(选择合适自身的移动App开发方式)【重点】  节省开发成本   从工资上：尽最大的可能，压榨员工的剩余劳动力 从时间上：因为 原生的安卓和IOS开发，它们的开发效率并不是很高，因为原生的代码复杂度比较高，因此原生的开发周期比较慢；如果采用移动App开发，那么，我们的开发周期会很短；因为 HTML + CSS + JS 足够简单；（对于前端开发APP来说，有两种方式，其中，比较早的一种，也是比较简单的一种，就是 先开发出一个网站， 然后再把网站运行一行打包的命令，就能得到一个 APP了）   市面上常见的App开发方式   WebApp：基于浏览器实现的，有特定功能的网站，称作WebApp  例如：百度脑图、https://m.</description>
    </item>
    
    <item>
      <title>Welcome to Syw Blog</title>
      <link>https://pipiwen.github.io/2017/11/03/hello-world/</link>
      <pubDate>Mon, 04 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://pipiwen.github.io/2017/11/03/hello-world/</guid>
      <description> “Yeah It&amp;rsquo;s on. ”
 Hello World! </description>
    </item>
    
    <item>
      <title></title>
      <link>https://pipiwen.github.io/search/placeholder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pipiwen.github.io/search/placeholder/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://pipiwen.github.io/top/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pipiwen.github.io/top/about/</guid>
      <description>Huabing Zhao is an ICT veteran with a passion for open source. He has a solid experience in the telecommunication and information technology industry for more than 17 years.
Throughout his career, he has built a number of large-scale, cross-country OSS/BSS platforms/systems and operation tools, most of them are still running in productions.
He loves open source and has been contributing to a variety of open source projects, including Istio(Service Mesh https://istio.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://pipiwen.github.io/top/books/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pipiwen.github.io/top/books/</guid>
      <description>Machine learning学习笔记 Coursera 在线课程 Machine learning 笔记讲师: 吴恩达(Andrew Ng) 课程地址：https://www.</description>
    </item>
    
  </channel>
</rss>